/**
 */
package BarCodeKeyExchange.provider;

import BarCodeKeyExchange.util.BarCodeKeyExchangeAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BarCodeKeyExchangeItemProviderAdapterFactory extends BarCodeKeyExchangeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BarCodeKeyExchangeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link BarCodeKeyExchange.AllowedProductOwnerCodesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllowedProductOwnerCodesTypeItemProvider allowedProductOwnerCodesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BarCodeKeyExchange.AllowedProductOwnerCodesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllowedProductOwnerCodesTypeAdapter() {
		if (allowedProductOwnerCodesTypeItemProvider == null) {
			allowedProductOwnerCodesTypeItemProvider = new AllowedProductOwnerCodesTypeItemProvider(this);
		}

		return allowedProductOwnerCodesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BarCodeKeyExchange.BarcodeStructureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BarcodeStructureTypeItemProvider barcodeStructureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BarCodeKeyExchange.BarcodeStructureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBarcodeStructureTypeAdapter() {
		if (barcodeStructureTypeItemProvider == null) {
			barcodeStructureTypeItemProvider = new BarcodeStructureTypeItemProvider(this);
		}

		return barcodeStructureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BarCodeKeyExchange.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link BarCodeKeyExchange.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BarCodeKeyExchange.KeysType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeysTypeItemProvider keysTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BarCodeKeyExchange.KeysType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeysTypeAdapter() {
		if (keysTypeItemProvider == null) {
			keysTypeItemProvider = new KeysTypeItemProvider(this);
		}

		return keysTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BarCodeKeyExchange.KeyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyTypeItemProvider keyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BarCodeKeyExchange.KeyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyTypeAdapter() {
		if (keyTypeItemProvider == null) {
			keyTypeItemProvider = new KeyTypeItemProvider(this);
		}

		return keyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BarCodeKeyExchange.PublicKeyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PublicKeyTypeItemProvider publicKeyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BarCodeKeyExchange.PublicKeyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPublicKeyTypeAdapter() {
		if (publicKeyTypeItemProvider == null) {
			publicKeyTypeItemProvider = new PublicKeyTypeItemProvider(this);
		}

		return publicKeyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BarCodeKeyExchange.TestbarcodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestbarcodeTypeItemProvider testbarcodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link BarCodeKeyExchange.TestbarcodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestbarcodeTypeAdapter() {
		if (testbarcodeTypeItemProvider == null) {
			testbarcodeTypeItemProvider = new TestbarcodeTypeItemProvider(this);
		}

		return testbarcodeTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (allowedProductOwnerCodesTypeItemProvider != null) allowedProductOwnerCodesTypeItemProvider.dispose();
		if (barcodeStructureTypeItemProvider != null) barcodeStructureTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (keysTypeItemProvider != null) keysTypeItemProvider.dispose();
		if (keyTypeItemProvider != null) keyTypeItemProvider.dispose();
		if (publicKeyTypeItemProvider != null) publicKeyTypeItemProvider.dispose();
		if (testbarcodeTypeItemProvider != null) testbarcodeTypeItemProvider.dispose();
	}

}
